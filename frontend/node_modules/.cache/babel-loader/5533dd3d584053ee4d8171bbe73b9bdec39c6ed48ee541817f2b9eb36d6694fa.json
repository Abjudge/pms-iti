{"ast":null,"code":"var _jsxFileName = \"/home/shahin/GithubU/pms-iti/frontend/src/pages/TestAxios.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TestAxios = () => {\n  _s();\n  const tokens = useSelector(state => state.TokensSlice.tokens);\n  console.log(\"ðŸš€ ~ file: TestAxios.jsx:9 ~ TestAxios ~ tokens:\", tokens);\n  const [workspaces, setWorkspaces] = useState();\n  console.log(\"ðŸš€ ~ file: TestAxios.jsx:17 ~ fetchData ~ `JWT ${tokens.access}`:\", `JWT ${tokens.access}`);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"http://127.0.0.1:8000/workspaces/\", {\n        headers: {\n          \"Authorization\": `JWT ${tokens.access}`\n        }\n      });\n      console.log(\"ðŸš€ ~ file: TestAxios.jsx:18 ~ fetchData ~ response:\", response);\n      setWorkspaces(await JSON.stringify(response.data));\n    } catch (error) {\n      alert(\"fetch error \");\n    }\n    try {\n      const response = await axios.get(\"http://127.0.0.1:8000/workspaces/\", {\n        headers: {\n          \"Authorization\": `JWT ${tokens.access}`\n        }\n      });\n      console.log(\"ðŸš€ ~ file: TestAxios.jsx:18 ~ fetchData ~ response:\", response);\n      setWorkspaces(await JSON.stringify(response.data));\n    } catch (error) {\n      alert(\"fetch error \");\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [tokens]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"workspaces\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: workspaces\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(TestAxios, \"xoW2tSKOaW9afWzAPWbxVq5KwU0=\", false, function () {\n  return [useSelector];\n});\n_c = TestAxios;\nexport default TestAxios;\nvar _c;\n$RefreshReg$(_c, \"TestAxios\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","TestAxios","_s","tokens","state","TokensSlice","console","log","workspaces","setWorkspaces","access","fetchData","response","get","headers","JSON","stringify","data","error","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/shahin/GithubU/pms-iti/frontend/src/pages/TestAxios.jsx"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\n\nconst TestAxios = () => {\n\n    const tokens = useSelector((state) => state.TokensSlice.tokens);\n    console.log(\"ðŸš€ ~ file: TestAxios.jsx:9 ~ TestAxios ~ tokens:\", tokens);\n\n    const [workspaces, setWorkspaces] = useState();\n    console.log(\"ðŸš€ ~ file: TestAxios.jsx:17 ~ fetchData ~ `JWT ${tokens.access}`:\", `JWT ${tokens.access}`);\n\n\n\n\n    const fetchData = async () => {\n        try {\n            const response = await axios.get(\"http://127.0.0.1:8000/workspaces/\", {\n                headers: { \"Authorization\": `JWT ${tokens.access}` },\n\n            }\n            );\n            console.log(\"ðŸš€ ~ file: TestAxios.jsx:18 ~ fetchData ~ response:\", response);\n\n            setWorkspaces(await JSON.stringify(response.data));\n        }\n\n        catch (error) {\n            alert(\"fetch error \");\n        }\n    \n    \n    \n        try {\n            const response = await axios.get(\"http://127.0.0.1:8000/workspaces/\", {\n                headers: { \"Authorization\": `JWT ${tokens.access}` },\n\n            }\n            );\n            console.log(\"ðŸš€ ~ file: TestAxios.jsx:18 ~ fetchData ~ response:\", response);\n\n            setWorkspaces(await JSON.stringify(response.data));\n        }\n\n        catch (error) {\n            alert(\"fetch error \");\n        }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    };\n\n\n    useEffect(() => {\n\n        fetchData();\n\n\n\n\n\n\n\n    }, [tokens]);\n\n\n\n    return (\n<>\n\n\n<h2>workspaces</h2>\n        <p>\n            {workspaces}\n        </p>\n</>\n\n    );\n};\n\nexport default TestAxios;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAMC,MAAM,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,WAAW,CAACF,MAAM,CAAC;EAC/DG,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEJ,MAAM,CAAC;EAEvE,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,CAAC;EAC9Cc,OAAO,CAACC,GAAG,CAAC,mEAAmE,EAAG,OAAMJ,MAAM,CAACO,MAAO,EAAC,CAAC;EAKxG,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,mCAAmC,EAAE;QAClEC,OAAO,EAAE;UAAE,eAAe,EAAG,OAAMX,MAAM,CAACO,MAAO;QAAE;MAEvD,CACA,CAAC;MACDJ,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEK,QAAQ,CAAC;MAE5EH,aAAa,CAAC,MAAMM,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACtD,CAAC,CAED,OAAOC,KAAK,EAAE;MACVC,KAAK,CAAC,cAAc,CAAC;IACzB;IAIA,IAAI;MACA,MAAMP,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,mCAAmC,EAAE;QAClEC,OAAO,EAAE;UAAE,eAAe,EAAG,OAAMX,MAAM,CAACO,MAAO;QAAE;MAEvD,CACA,CAAC;MACDJ,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEK,QAAQ,CAAC;MAE5EH,aAAa,CAAC,MAAMM,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACtD,CAAC,CAED,OAAOC,KAAK,EAAE;MACVC,KAAK,CAAC,cAAc,CAAC;IACzB;EA4BJ,CAAC;EAGD1B,SAAS,CAAC,MAAM;IAEZkB,SAAS,CAAC,CAAC;EAQf,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAIZ,oBACJL,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBAGAtB,OAAA;MAAAsB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACX1B,OAAA;MAAAsB,QAAA,EACKZ;IAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA,eACV,CAAC;AAGH,CAAC;AAACtB,EAAA,CAlGID,SAAS;EAAA,QAEIL,WAAW;AAAA;AAAA6B,EAAA,GAFxBxB,SAAS;AAoGf,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}